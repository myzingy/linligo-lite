<style lang="less">
    @import "./style/base";
    @import "./style/weui";
    page{
        background-color: #F8F8F8;
        font-size: 16px;
        font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;
    }
    .page__hd {
        padding: 40px;
    }
    .page__bd {
        padding-bottom: 40px;
    }
    .page__bd_spacing {
        padding-left: 15px;
        padding-right: 15px;
    }

    .page__ft{
        padding-bottom: 10px;
        text-align: center;
    }

    .page__title {
        text-align: left;
        font-size: 20px;
        font-weight: 400;
    }

    .page__desc {
        margin-top: 5px;
        color: #888888;
        text-align: left;
        font-size: 14px;
    }
    .weui-cell_input {
        padding-top:20rpx;
        padding-bottom:20rpx;
    }
    .mini-btn{
        margin-right: 5px;
        line-height: inherit;
    }
    .txt-btn{
        color: inherit !important;
        border: none !important;
        background-color: transparent !important;
        text-align: left;
        padding: 0;
        margin: 0;
        position: inherit;
        font-size: 100%;
        line-height: 100%;
    }
</style>

<script>
    import wepy from 'wepy'
    import 'wepy-async-function'
    import URI from './util/uri'

    export default class extends wepy.app {
        config = {
            pages: [
                'pages/purchase/order',
                'pages/index',
                'pages/login',

                'pages/purchase/info',
                'pages/purchase/new',
                'pages/purchase/details',
                'pages/purchase/orderList',

                'pages/me/index',
                'pages/me/purchase',

            ],
            window: {
                backgroundTextStyle: 'light',
                navigationBarBackgroundColor: '#fff',
                navigationBarTitleText: 'WeChat',
                navigationBarTextStyle: 'black'
            }
        }

        globalData = {
            userInfo: null,
            isRefresh:false,
            phone:"",
        }

        constructor() {
            super()
            this.use('requestfix')
            this.use('promisify');
            // 拦截request请求
            this.intercept('request', {
                // 发出请求时的回调函数
                config (p) {
                    // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
                    if(typeof p.url!='undefined'){
                        if(!p.url.silence){
                            wepy.showLoading({
                                title: '逛市场中...',
                                icon: 'loading'
                            })
                        }
                    }
                    p.timestamp = +new Date();
                    if(typeof p.url.type!='undefined' && !p.method){
                        p.method=p.url.type;
                    }
                    //console.log('config request: ', p.url);
                    p.url=URI.cgi(p.url,p.data);

                    let  Bearer = wx.getStorageSync('access_token')
                    let  formIds = this.formIds();
                    let  userinfo = wx.getStorageSync('userinfo');
                    let  openid=userinfo?userinfo.openId:'';
                    p.header= {
                        'Authorization': Bearer ? ('Bearer ' + Bearer) : '',
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'formIds':JSON.stringify(formIds),
                        'openid':openid,
                    }
                    console.log('config request: ', p.url,p.data);
                    // 必须返回OBJECT参数对象，否则无法发送请求到服务端
                    return p;
                },

                // 请求成功后的回调函数
                success (p) {
                    // 可以在这里对收到的响应数据对象进行加工处理
                    console.log('request success: ', p);
                    if(p.header.formIds=='clean'){
                        this.formIds('clean');
                    }
                    // 必须返回响应数据对象，否则后续无法对响应数据进行处理
                    if(p.statusCode==401){
                        removeStorageSync('access_token');
                        removeStorageSync('login_code');
                        throw new Error('401');
                        return false;
                    }
                    if(p.statusCode>=401){
                        wepy.showToast({
                            title: p.data.message?p.data.message:(p.statusCode+' error'),
                            icon: 'none',
                            duration: 2000
                        });
                        throw new Error(p.statusCode);
                        return false;
                    }
                    return p.data;
                },

                //请求失败后的回调函数
                fail (p) {
                    console.log('request fail: ', p);
                    // 必须返回响应数据对象，否则后续无法对响应数据进行处理
                    return p;
                },

                // 请求完成时的回调函数(请求成功或失败都会被执行)
                complete (p) {
                    console.log('request complete: ', p);
                    setTimeout(function(){
                        wepy.hideLoading();
                    },500)
                }
            });
        }

        onLaunch() {
            console.log('app-onLaunch',arguments);
            this.wxLogin();
            this.getStorageInit();
        }
        onShow(){
            console.log('app-onShow',arguments);
        }
        getStorageInit(){
            this.globalData.userInfo=wepy.getStorageSync('userinfo');
            console.log('globalData.userInfo',this.globalData.userInfo);
            this.globalData.phone=wepy.getStorageSync('phone');
            console.log('globalData.phone',this.globalData.phone);
        }
        sleep(s) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('promise resolved')
                }, s * 1000)
            })
        }

        async testAsync() {
            const data = await this.sleep(3)
            console.log(data)
        }

        async wxLogin(){
            //微信自己的code 状态
            let wxLoginState = await wepy.checkSession().then(res => {return true}, res => {return false});
            let code =wepy.getStorageSync('login_code');
            if(!wxLoginState || !code){
                let {code: code} = await wepy.login();
                wepy.setStorage({key:'login_code',data:code});
            }
        }
        async checkSerLogin(){
            let access_token = wepy.getStorageSync('access_token');
            if(!access_token){
                let {code: code} = await wepy.login();
                wepy.setStorage({key:'login_code',data:code});
                wepy.navigateTo({
                    url: '/pages/login'
                })
            }
        }
        serLogin(){
            let that=this;
            return new Promise(async function(resolve,reject){
                let code =wepy.getStorageSync('login_code');
                if(!code){
                    let {code: code} = await wepy.login();
                }
                let access_token = wepy.getStorageSync('access_token')
                console.log('app-serLogin:code,access_token',code,access_token);
                if(code){
                    if(access_token){
                        return resolve();
                    }
                    let {iv: iv, encryptedData: encryptedData, userInfo: userInfo} = await wepy.getUserInfo({withCredentials: true})

                    let loginData = {code: code, iv: iv, encryptedData: encryptedData}
                    let params={
                        url:URI.miniLogin, //自己服务器维护用户登录状态地址
                        data:loginData,
                    }
                    wepy.request(params).then(res => {
                        wepy.setStorageSync('access_token', res.access_token)
                        wepy.setStorageSync('refresh_token', res.refresh_token)
                        wepy.setStorageSync('userinfo', res.userinfo)
                        that.globalData.userInfo = res.userinfo
                        console.log('serLogin success',res);
                        resolve();
                    }).catch(res => {
                        console.log('serLogin fail',res);
                        reject();
                    })
                }else{
                    console.log('serLogin fail,code is null',code);
                    reject();
                }

            })
        }
        authSetting(){
            let that=this;
            return new Promise(function (resole,reject) {
                wepy.showModal({
                    title: '授权提示',
                    content: '为方便使用，请授权小程序访问用户信息、地址信息以及电话',
                }).then(function () {
                    wepy.openSetting().then(function (res) {
                        console.log('wepy.openSetting',res.authSetting);
                        let scopeFlag=true;
                        Object.keys(res.authSetting).forEach((scope) => {
                            if(res.authSetting[scope]==false){
                                scopeFlag=false;
                                return false;
                            }
                        })
                        if(!scopeFlag){
                            that.authSetting();
                        }
                        resole();
                    });
                }).catch(function () {
                    reject();
                    that.authSetting();
                });
            });

        }
        bindShareOpenid(){
            wepy.getStorage({key:'share_openid'}).then(function (_Storage) {
                let share_openid = _Storage.data;
                if(share_openid){
                    if(share_openid=='binded') return;
                    let params={
                        url:URI.setShareOpenid,
                        data:{
                            share_openid:share_openid
                        }
                    }
                    wepy.request(params).then(res => {
                        wepy.setStorage({key:'share_openid',data:'binded'})
                    });
                }
            }).catch((res)=>{
                console.log('getStorage.share_openid fail');
            });
        }
        confirm(obj){
            if(typeof obj=='string'){
                obj={
                    content:obj
                }
            }
            return new Promise(function(resole,reject){
                wx.showModal({
                    title: obj.title?obj.title:'确认窗口',
                    content: obj.content,
                    confirmText: obj.confirmText?obj.confirmText:'确 认',
                    cancelText: obj.cancelText?obj.cancelText:'取 消',
                    success: function (res) {
                        if (res.confirm) {
                            resole()
                        }else{
                            reject()
                        }
                    }
                });
            });
        }
        formIds(e){
            if(!e) return wepy.getStorageSync('formIds');
            if(e=='clear' || e=='clean') return wepy.removeStorage({key:'formIds'});

            //saves
            let formId=e.detail.formId.replace(/[ ]/g,'');
            if(formId){
                let formIds=wepy.getStorageSync('formIds');
                if(!formIds){
                    formIds={};
                }
                formIds[formId]=Date.parse(new Date())/1000;
                wepy.setStorage({key:'formIds',data:formIds});
            }

        }
    }
</script>
